# coding: utf-8
from flask import render_template, flash, redirect, session, url_for, request, g 
from flask_login import login_user, logout_user, current_user, login_required
from app import app, lm, oid 
from flask_wtf.csrf import CSRFProtect as CsrfProtect
#from flask_wtf.csrf import CsrfProtect
from forms import LoginForm
from db.db import User
@app.route('/')
@app.route('/index')
@login_required
def index():
    user = 'arno' # fake user
    #user = current_user.username # fake user
    posts = [ # fake array of posts
        { 
            'author': { 'nickname': 'John' }, 
            'body': 'Beautiful day in Portland!' 
        },
        { 
            'author': { 'nickname': 'Susan' }, 
            'body': 'The Avengers movie was so cool!' 
        }
    ]
    return render_template("index.html",
    title = 'home',
    user = user,
    posts = posts)

# 这个callback函数用于reload User object，根据session中存储的user id
@lm.user_loader
def load_user(user_id):
    return User.get(user_id)

# csrf protection
csrf = CsrfProtect()
csrf.init_app(app)

@app.before_request
def before_request():
    g.user = current_user

@app.route('/login', methods = ['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user_name = request.form.get('username', None)
        password = request.form.get('password', None)
        remember_me = request.form.get('remember_me', False)
        user = User(user_name)
        user.password(password)
        #if user.verify_password(password):
        #    login_user(user)
        login_user(user, remember_me)
        return redirect(request.args.get('next') or url_for('index'))
    return render_template('login.html', title="Sign In", form=form)

#@oid.after_login
#def after_login(resp):
#    if resp.email is None or resp.email == "":
#        flash('Invalid login. Please try again.')
#        redirect(url_for('login'))
#    user = User.query.filter_by(email = resp.email).first()
#    if user is None:
#        user_name = resp.user_name
#        if user_name is None or user_name == "":
#            user_name = resp.email.split('@')[0]
#        user = User(user_name = user_name, email = resp.email, role = ROLE_USER)
#        db.session.add(user)
#        db.session.commit()
#    remember_me = False
#    if 'remember_me' in session:
#        remember_me = session['remember_me']
#        session.pop('remember_me', None)
#    login_user(user, remember = remember_me)
#    return redirect(request.args.get('next') or url_for('index'))

@app.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('index'))
